from Crypto.Util.number import bytes_to_long, long_to_bytes

names = ["Dear AURELIA OPAL DIANA SYKES",
         "Dear ERROL DALLAS ELTON GATES", 
         "Dear ELLIS ALDO DARNELL FRANK"]

base = ' ' * len(names[0])

n = [29054462242931980522884029231454307773444637434882646678478836363295480077901382692755130306505112666379094872349200543463311724390172629793057091770640583404469223526670408040008568833117080721747815754025796168725245233384778943818904324013547486379401831192144125636500630602126112694858826775567692578508498207604318842023805755894341832427797338778028126233312451012810899280759803638293425353769307127699278686506522371728484870880346592454346104249396900331594078024602436343725555399355670536808057295310057626870533598796836816170006184613965793900331581060588611636233815584885292419482173612284201724119479, 25636376486808566215254726705727936755197550771019990699244575005395267032307659220506976076428630750541702314977567703137992521564500511529435456087935299124994719006369415966854934778466803219358053519536762392245857212913195598699750517829681727029348435788053370937432624093934843909850082110372645775650991367158818397192102101270098880385791249112958890381677901350271468217168790904666567563908411924413097516992462291844937712263141880234996909848365131667358446617229476780467209369878857711247823440428526351004187769878693777949300307641183233668912289582550126163508776026780157792718616480005336574488791, 25449292264231218925091647421612030723249528202999795148854994685982289786790954360041586372808745677029729305810094997807447524994810400873386201765074025796537818047583188517581133251032185800264480585896348497854404125240952775948825348809156325510718352152405501175480607499954592251025669862548210132608729183151560489561826389246809374081118123704591627840659076265912685814642410139049890888902376875464054687326126149795568470965757409156230169992004992627655252062768772123627900290010757202795612137439155644188246635972905374807738825444999523301340712802005371473118805473286908658493417862405759440583613]

c = [int(0x771781e2ecb700ca240a68b52667824eb80ce528b85af5307ddf9ab65f9a5f42e270d1baf3ea3e2484abcbaf36a852e113c8ed8cee1417d9a94a5d05d48b46d6f2b0d7a02779ac2e88b3581be3d7e5b5f681540f87a3698cca99ecdf27a9215d414e5f79ea387404446d52a99854dc5fca8aebbd11b1d663f0a2950f5ec972386de3f98ae8a561aa2ee3ba4cec358164ca46e09ffd2650d3bd6f4526b1aae27357ab323b57dbc8adc96da55be9aaf9aef9e936c70cc518a6b7510eb200996bdfb4c17c20f0f6ecb11c4bbaf7518df3eb5cab4429e575036f6204141f4fa1722021c4b708b1edc307b426c841000fed97a2658461b29f0d5ed8c02af594795705), int(0xb6fdc4efe299a3641b01e357cb033667ca2d72f2feafddc84f746e869d4f07de0af6b340650c31a307ecc48106a708b6c9f1c60556b482d87dc4c069814041656b73fac05f39d685f68db8e59651b26d433e45a4103df37a0afa3bb05bf8b48dec647a79a3451232ed22f76e23b9c1d4862e1589ef81dbbefa527a25dab7318e5f9d3b62f310e4ddb809d87622f5bc87c85acbf3dec2c62852459a9d9ed821d6515c5ba31295082e9685dfddc0dfe107485761c6407a5610ba73f49111158ec146d9d75493cdd235e2b8255123d52fbb88ebdbf1926b6434ebe063a832d6091c843e3cf07c0f65f2e82d6964f33fa51f5141d1499f8072bf7e242551e623266c), int(0x16e161d26e6cf25279b81d34687c01f25d03bb82b868a7d35271bab3f63239f1cfefe5fde70146c452db4690a55d937ef858b0d17d3539a06e420b536e6798fc83ddc85eb47a7b2efff6a22a0413ac62faeb633f90cc64e535975e0de6967589f6e4c577c40f8655cff2c84313fde1fcf7d95c9040819336a1bfdb4c143b4f8215e29671ded5c1a9782c175ac34ecbf189f116847ff914c36d42fb46babedc02783c68c4138920dbf3e717ac71c016cee4cc1a97017958d814299ff1f49bbecb9373b4287da3bea2e6fd84110bc9088c8c5768ffe02c9e37b4ef61c580c83a778160f0f0bcbd389819e9851bc3f4d123bd341fbcf8b73f5b1553ec05ab4819)]

N = n[0]*n[1]*n[2]

T = []
T.append(crt([1, 0, 0], n))
T.append(crt([0, 1, 0], n))
T.append(crt([0, 0, 1], n))

for bytelen in range(2*8*256):

    exp = 8*bytelen

    b = [(pow(2, exp))*(bytes_to_long(x.encode()) -
                        bytes_to_long(base.encode())) for x in names]

    P.<x> = PolynomialRing(Zmod(N))

    # construct g(x)
    g = 0
    for i in range(3):
        g += (i+1)*T[i]*((x + b[i])^3 - c[i])

    # g(x) has to be monic polynomial in order to use coppersmith approach
    g = g.monic()

    # coppersmith method in Sage
    M = g.small_roots()

    if (M):
        # and we get the message
        print(long_to_bytes(int(M[0])).decode(errors="ignore"))
