from Crypto.PublicKey import RSA
from Crypto.Util.number import *
import math
from sage.all import *

f = open('pubkey.pem', 'r')

key = RSA.import_key(f.read())

c5 = 150316221346267410809216070631265577086647557255058978693263311834040361385979497939787148253420228265933080571063280549683411131490785489852208513970022036030235510619505070560577640482525517230800827924735797768551631999861118565792087588883442076639503614731900126192288101922336790671418167094212566425730755125929063230544055307991569286648346607082560714457783349430844444145853070020681895128323940108584047554689456198211384302643882944203443693459353490525095399308591382807873827153271709751145340918931921199809392574257515083811547551542381554450667507463129242842991773644466565709541408007035822441182819491031151966390600637556944001635885753813063412025476129776667311057753580671114137006914234280743626227222830715489325843692514422284862160327577479086764156789594150174553517173605750943941902261404346141672823080630279339009650326949968080668950346180042634744298651493598267628791173827410572328914438586280062669782155473274426815377878548397379333861631786919400859072328244456494301813534046435446551650327818224688703576046240455159104816380469339682093535453062728098204705863882133798533770246448205773182674554718696384672858950116344665134759750209246641621568800496128665417235039148922362657797221511

def pad(message):
    bytelength = int(math.floor(math.log2(key.n))) // 8
    msg = b'\xff' * (bytelength - len(message)) + message
    return msg

base = pad(b"\x00" * 13)
base = bytes_to_long(base)

K = Zmod(key.n)
F.<x> = PolynomialRing(K, implementation='NTL')
f = (base + x) ^ key.e - c5
ak = f.small_roots()
print(ak)