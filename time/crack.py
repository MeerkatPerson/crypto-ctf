from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse

f = open('pubkey.pem', 'r')

key = RSA.import_key(f.read())

e = key.e

N = key.n

p = 102943708310120816607112798292031760798947173379646608237857085302895018367692178092553383127365221297711784412383602193784101511283520197361091516978550507112460029479209284767509390777105853381279997110156598639245903522957087054060715869278766496282021226514654914676526531522364925419768195205103136475407

q = 152851066022889115475893385500353607788616429886802366427911486386410709617629583723448918298944668553549936912494576381074650380769744168816255298851352669226132372420763080920746277082239224064334659936648341404566737585084434616884681191927039246092183428836675627823422245041159877171445469288661150412269

phi_n = (p-1)*(q-1)

d = inverse(key.e, phi_n)

print(f'd: {d}')


def int_to_str(n):
    if n == 0:
        return ''
    return int_to_str(n // 256) + chr(n % 256)


def decrypt(cipher, key=key):
    return int_to_str(pow(cipher, d, key.n))


flag_enc = 0xcda4d49eb5236ad17a14ab2e55639486608a4dcc204a73da2ea28b235666ce057d96194ee00c656f420f7b8d78336de390caa3373235b2f645f7fd975483672e19f4776217ac4a79274c3cac074c5867eb9cb7105e97fdb6f518f2673c874bd1ff5a786db98d778f63b75f5bef6ccb0c94dab5f23ba40d8cd382cc19745055436f895a23fb636dbd3754fad93f724a3c902dec887e303d97e0e88b91839d3ba93d9ca1e597bf1a967563e9f8405c0bc9fcfec06ba590d50bc829618e6e23e676038f03cd15bfeb929409dcf6a5a5dc449201f2e29710d2b759d3af861096aa2cacb9ac7c14e0c55493e8c829a41c6a5a90eadc5872aec1db2d12f5a595e973d

print(decrypt(flag_enc))
